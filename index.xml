<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>cmdstanpy for Regression Monkeys</title>
<link>https://ryonakagami.github.io/cmdstan_for_regression_monkey/</link>
<atom:link href="https://ryonakagami.github.io/cmdstan_for_regression_monkey/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Fri, 01 Nov 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>1  二項分布を用いたベイジアンモデリング</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/cmdstan_for_regression_monkey/posts/bayesianstatistics101/binomial_toymodel.html</link>
  <description><![CDATA[ 




<div id="94140a1d" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cmdstanpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CmdStanModel</span>
<span id="cb1-2"></span>
<span id="cb1-3">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-4"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-5"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-6"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb1-7"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span> : [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-8">}</span>
<span id="cb1-9"></span>
<span id="cb1-10">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CmdStanModel(stan_file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../../stancode/binomial_toymodel_01.stan"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>12:01:02 - cmdstanpy - INFO - compiling stan file /home/runner/work/cmdstan_for_regression_monkey/cmdstan_for_regression_monkey/stancode/binomial_toymodel_01.stan to exe file /home/runner/work/cmdstan_for_regression_monkey/cmdstan_for_regression_monkey/stancode/binomial_toymodel_01
12:01:08 - cmdstanpy - INFO - compiled model executable: /home/runner/work/cmdstan_for_regression_monkey/cmdstan_for_regression_monkey/stancode/binomial_toymodel_01</code></pre>
</div>
</div>
<div id="82c3e789" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">fit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.sample(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data, show_console <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>12:01:08 - cmdstanpy - INFO - Chain [1] start processing
12:01:08 - cmdstanpy - INFO - Chain [2] start processing
12:01:08 - cmdstanpy - INFO - Chain [3] start processing
12:01:08 - cmdstanpy - INFO - Chain [4] start processing
12:01:08 - cmdstanpy - INFO - Chain [1] done processing
12:01:08 - cmdstanpy - INFO - Chain [2] done processing
12:01:08 - cmdstanpy - INFO - Chain [4] done processing
12:01:08 - cmdstanpy - INFO - Chain [3] done processing</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Chain [1] method = sample (Default)
Chain [1] sample
Chain [1] num_samples = 1000 (Default)
Chain [1] num_warmup = 1000 (Default)
Chain [1] save_warmup = false (Default)
Chain [1] thin = 1 (Default)
Chain [1] adapt
Chain [1] engaged = true (Default)
Chain [1] gamma = 0.05 (Default)
Chain [1] delta = 0.8 (Default)
Chain [1] kappa = 0.75 (Default)
Chain [1] t0 = 10 (Default)
Chain [1] init_buffer = 75 (Default)
Chain [1] term_buffer = 50 (Default)
Chain [1] window = 25 (Default)
Chain [1] save_metric = false (Default)
Chain [1] algorithm = hmc (Default)
Chain [1] hmc
Chain [1] engine = nuts (Default)
Chain [1] nuts
Chain [1] max_depth = 10 (Default)
Chain [1] metric = diag_e (Default)
Chain [1] metric_file =  (Default)
Chain [1] stepsize = 1 (Default)
Chain [1] stepsize_jitter = 0 (Default)
Chain [1] num_chains = 1 (Default)
Chain [2] method = sample (Default)
Chain [1] id = 1 (Default)
Chain [1] data
Chain [1] file = /tmp/tmpbd3i87cn/m4hm5zyi.json
Chain [1] init = 2 (Default)
Chain [1] random
Chain [1] seed = 26068
Chain [1] output
Chain [1] file = /tmp/tmpbd3i87cn/binomial_toymodel_013uxepct5/binomial_toymodel_01-20241101120108_1.csv
Chain [1] diagnostic_file =  (Default)
Chain [1] refresh = 100 (Default)
Chain [1] sig_figs = -1 (Default)
Chain [1] profile_file = profile.csv (Default)
Chain [1] save_cmdstan_config = false (Default)
Chain [1] num_threads = 1 (Default)
Chain [1] 
Chain [2] sample
Chain [2] num_samples = 1000 (Default)
Chain [2] num_warmup = 1000 (Default)
Chain [2] save_warmup = false (Default)
Chain [2] thin = 1 (Default)
Chain [2] adapt
Chain [2] engaged = true (Default)
Chain [2] gamma = 0.05 (Default)
Chain [2] delta = 0.8 (Default)
Chain [2] kappa = 0.75 (Default)
Chain [2] t0 = 10 (Default)
Chain [2] init_buffer = 75 (Default)
Chain [2] term_buffer = 50 (Default)
Chain [2] window = 25 (Default)
Chain [2] save_metric = false (Default)
Chain [2] algorithm = hmc (Default)
Chain [2] hmc
Chain [2] engine = nuts (Default)
Chain [2] nuts
Chain [2] max_depth = 10 (Default)
Chain [2] metric = diag_e (Default)
Chain [2] metric_file =  (Default)
Chain [2] stepsize = 1 (Default)
Chain [2] stepsize_jitter = 0 (Default)
Chain [2] num_chains = 1 (Default)
Chain [2] id = 2
Chain [2] data
Chain [2] file = /tmp/tmpbd3i87cn/m4hm5zyi.json
Chain [2] init = 2 (Default)
Chain [2] random
Chain [2] seed = 26068
Chain [4] method = sample (Default)
Chain [1] 
Chain [1] Gradient evaluation took 4e-06 seconds
Chain [1] 1000 transitions using 10 leapfrog steps per transition would take 0.04 seconds.
Chain [1] Adjust your expectations accordingly!
Chain [1] 
Chain [1] 
Chain [4] sample
Chain [4] num_samples = 1000 (Default)
Chain [4] num_warmup = 1000 (Default)
Chain [4] save_warmup = false (Default)
Chain [4] thin = 1 (Default)
Chain [4] adapt
Chain [4] engaged = true (Default)
Chain [4] gamma = 0.05 (Default)
Chain [4] delta = 0.8 (Default)
Chain [4] kappa = 0.75 (Default)
Chain [4] t0 = 10 (Default)
Chain [4] init_buffer = 75 (Default)
Chain [4] term_buffer = 50 (Default)
Chain [4] window = 25 (Default)
Chain [4] save_metric = false (Default)
Chain [4] algorithm = hmc (Default)
Chain [4] hmc
Chain [4] engine = nuts (Default)
Chain [4] nuts
Chain [4] max_depth = 10 (Default)
Chain [4] metric = diag_e (Default)
Chain [4] metric_file =  (Default)
Chain [4] stepsize = 1 (Default)
Chain [4] stepsize_jitter = 0 (Default)
Chain [4] num_chains = 1 (Default)
Chain [4] id = 4
Chain [4] data
Chain [4] file = /tmp/tmpbd3i87cn/m4hm5zyi.json
Chain [4] init = 2 (Default)
Chain [4] random
Chain [4] seed = 26068
Chain [4] output
Chain [4] file = /tmp/tmpbd3i87cn/binomial_toymodel_013uxepct5/binomial_toymodel_01-20241101120108_4.csv
Chain [4] diagnostic_file =  (Default)
Chain [4] refresh = 100 (Default)
Chain [4] sig_figs = -1 (Default)
Chain [4] profile_file = profile.csv (Default)
Chain [4] save_cmdstan_config = false (Default)
Chain [4] num_threads = 1 (Default)
Chain [4] 
Chain [1] Iteration:    1 / 2000 [  0%]  (Warmup)
Chain [2] output
Chain [2] file = /tmp/tmpbd3i87cn/binomial_toymodel_013uxepct5/binomial_toymodel_01-20241101120108_2.csv
Chain [2] diagnostic_file =  (Default)
Chain [2] refresh = 100 (Default)
Chain [2] sig_figs = -1 (Default)
Chain [2] profile_file = profile.csv (Default)
Chain [2] save_cmdstan_config = false (Default)
Chain [2] num_threads = 1 (Default)
Chain [2] 
Chain [2] 
Chain [2] Gradient evaluation took 4e-06 seconds
Chain [2] 1000 transitions using 10 leapfrog steps per transition would take 0.04 seconds.
Chain [2] Adjust your expectations accordingly!
Chain [2] 
Chain [2] 
Chain [2] Iteration:    1 / 2000 [  0%]  (Warmup)
Chain [3] method = sample (Default)
Chain [1] Iteration:  100 / 2000 [  5%]  (Warmup)
Chain [3] sample
Chain [3] num_samples = 1000 (Default)
Chain [3] num_warmup = 1000 (Default)
Chain [3] save_warmup = false (Default)
Chain [3] thin = 1 (Default)
Chain [3] adapt
Chain [3] engaged = true (Default)
Chain [3] gamma = 0.05 (Default)
Chain [3] delta = 0.8 (Default)
Chain [3] kappa = 0.75 (Default)
Chain [3] t0 = 10 (Default)
Chain [3] init_buffer = 75 (Default)
Chain [3] term_buffer = 50 (Default)
Chain [3] window = 25 (Default)
Chain [3] save_metric = false (Default)
Chain [3] algorithm = hmc (Default)
Chain [3] hmc
Chain [3] engine = nuts (Default)
Chain [3] nuts
Chain [2] Iteration:  100 / 2000 [  5%]  (Warmup)
Chain [3] max_depth = 10 (Default)
Chain [4] 
Chain [3] metric = diag_e (Default)
Chain [3] metric_file =  (Default)
Chain [3] stepsize = 1 (Default)
Chain [3] stepsize_jitter = 0 (Default)
Chain [3] num_chains = 1 (Default)
Chain [3] id = 3
Chain [3] data
Chain [3] file = /tmp/tmpbd3i87cn/m4hm5zyi.json
Chain [3] init = 2 (Default)
Chain [3] random
Chain [3] seed = 26068
Chain [3] output
Chain [3] file = /tmp/tmpbd3i87cn/binomial_toymodel_013uxepct5/binomial_toymodel_01-20241101120108_3.csv
Chain [3] diagnostic_file =  (Default)
Chain [3] refresh = 100 (Default)
Chain [3] sig_figs = -1 (Default)
Chain [3] profile_file = profile.csv (Default)
Chain [3] save_cmdstan_config = false (Default)
Chain [3] num_threads = 1 (Default)
Chain [3] 
Chain [4] Gradient evaluation took 2e-06 seconds
Chain [4] 1000 transitions using 10 leapfrog steps per transition would take 0.02 seconds.
Chain [4] Adjust your expectations accordingly!
Chain [4] 
Chain [4] 
Chain [4] Iteration:    1 / 2000 [  0%]  (Warmup)
Chain [1] Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain [3] 
Chain [3] Gradient evaluation took 2e-06 seconds
Chain [3] 1000 transitions using 10 leapfrog steps per transition would take 0.02 seconds.
Chain [3] Adjust your expectations accordingly!
Chain [2] Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain [3] 
Chain [3] 
Chain [4] Iteration:  100 / 2000 [  5%]  (Warmup)
Chain [3] Iteration:    1 / 2000 [  0%]  (Warmup)
Chain [1] Iteration:  300 / 2000 [ 15%]  (Warmup)
Chain [2] Iteration:  300 / 2000 [ 15%]  (Warmup)
Chain [4] Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain [3] Iteration:  100 / 2000 [  5%]  (Warmup)
Chain [1] Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain [2] Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain [4] Iteration:  300 / 2000 [ 15%]  (Warmup)
Chain [3] Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain [1] Iteration:  500 / 2000 [ 25%]  (Warmup)
Chain [2] Iteration:  500 / 2000 [ 25%]  (Warmup)
Chain [4] Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain [3] Iteration:  300 / 2000 [ 15%]  (Warmup)
Chain [1] Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain [2] Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain [4] Iteration:  500 / 2000 [ 25%]  (Warmup)
Chain [1] Iteration:  700 / 2000 [ 35%]  (Warmup)
Chain [3] Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain [2] Iteration:  700 / 2000 [ 35%]  (Warmup)
Chain [4] Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain [1] Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain [3] Iteration:  500 / 2000 [ 25%]  (Warmup)
Chain [2] Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain [1] Iteration:  900 / 2000 [ 45%]  (Warmup)
Chain [4] Iteration:  700 / 2000 [ 35%]  (Warmup)
Chain [3] Iteration:  600 / 2000 [ 30%]  (Warmup)
Chain [2] Iteration:  900 / 2000 [ 45%]  (Warmup)
Chain [4] Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain [1] Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain [1] Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain [3] Iteration:  700 / 2000 [ 35%]  (Warmup)
Chain [2] Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain [4] Iteration:  900 / 2000 [ 45%]  (Warmup)
Chain [2] Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain [3] Iteration:  800 / 2000 [ 40%]  (Warmup)
Chain [4] Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain [4] Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain [1] Iteration: 1100 / 2000 [ 55%]  (Sampling)
Chain [3] Iteration:  900 / 2000 [ 45%]  (Warmup)
Chain [2] Iteration: 1100 / 2000 [ 55%]  (Sampling)
Chain [3] Iteration: 1000 / 2000 [ 50%]  (Warmup)
Chain [3] Iteration: 1001 / 2000 [ 50%]  (Sampling)
Chain [4] Iteration: 1100 / 2000 [ 55%]  (Sampling)
Chain [1] Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain [2] Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain [3] Iteration: 1100 / 2000 [ 55%]  (Sampling)
Chain [1] Iteration: 1300 / 2000 [ 65%]  (Sampling)
Chain [4] Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain [2] Iteration: 1300 / 2000 [ 65%]  (Sampling)
Chain [3] Iteration: 1200 / 2000 [ 60%]  (Sampling)
Chain [4] Iteration: 1300 / 2000 [ 65%]  (Sampling)
Chain [1] Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain [2] Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain [3] Iteration: 1300 / 2000 [ 65%]  (Sampling)
Chain [1] Iteration: 1500 / 2000 [ 75%]  (Sampling)
Chain [4] Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain [2] Iteration: 1500 / 2000 [ 75%]  (Sampling)
Chain [1] Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain [3] Iteration: 1400 / 2000 [ 70%]  (Sampling)
Chain [4] Iteration: 1500 / 2000 [ 75%]  (Sampling)
Chain [2] Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain [1] Iteration: 1700 / 2000 [ 85%]  (Sampling)
Chain [4] Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain [3] Iteration: 1500 / 2000 [ 75%]  (Sampling)
Chain [2] Iteration: 1700 / 2000 [ 85%]  (Sampling)
Chain [1] Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain [4] Iteration: 1700 / 2000 [ 85%]  (Sampling)
Chain [3] Iteration: 1600 / 2000 [ 80%]  (Sampling)
Chain [2] Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain [1] Iteration: 1900 / 2000 [ 95%]  (Sampling)
Chain [4] Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain [3] Iteration: 1700 / 2000 [ 85%]  (Sampling)
Chain [2] Iteration: 1900 / 2000 [ 95%]  (Sampling)
Chain [1] Iteration: 2000 / 2000 [100%]  (Sampling)
Chain [1] 
Chain [1] Elapsed Time: 0.008 seconds (Warm-up)
Chain [1] 0.016 seconds (Sampling)
Chain [1] 0.024 seconds (Total)
Chain [1] 
Chain [4] Iteration: 1900 / 2000 [ 95%]  (Sampling)
Chain [3] Iteration: 1800 / 2000 [ 90%]  (Sampling)
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [1] 
Chain [2] Iteration: 2000 / 2000 [100%]  (Sampling)
Chain [2] 
Chain [2] Elapsed Time: 0.009 seconds (Warm-up)
Chain [2] 0.017 seconds (Sampling)
Chain [2] 0.026 seconds (Total)
Chain [2] 
Chain [1] 
Chain [2] 
Chain [4] Iteration: 2000 / 2000 [100%]  (Sampling)
Chain [3] Iteration: 1900 / 2000 [ 95%]  (Sampling)
Chain [4] 
Chain [4]  Elapsed Time: 0.008 seconds (Warm-up)
Chain [4]                0.017 seconds (Sampling)
Chain [4]                0.025 seconds (Total)
Chain [4] 
Chain [4] 
Chain [3] Iteration: 2000 / 2000 [100%]  (Sampling)
Chain [3] 
Chain [3] Elapsed Time: 0.008 seconds (Warm-up)
Chain [3] 0.019 seconds (Sampling)
Chain [3] 0.027 seconds (Total)
Chain [3] 
Chain [3] </code></pre>
</div>
</div>
<div id="fd46a244" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">fit.summary()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Mean</th>
<th data-quarto-table-cell-role="th">MCSE</th>
<th data-quarto-table-cell-role="th">StdDev</th>
<th data-quarto-table-cell-role="th">5%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">95%</th>
<th data-quarto-table-cell-role="th">N_Eff</th>
<th data-quarto-table-cell-role="th">N_Eff/s</th>
<th data-quarto-table-cell-role="th">R_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">lp__</td>
<td>-14.263100</td>
<td>0.017512</td>
<td>0.718309</td>
<td>-15.743200</td>
<td>-13.993000</td>
<td>-13.762900</td>
<td>1682.43</td>
<td>24383.0</td>
<td>1.00052</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">theta</td>
<td>0.316506</td>
<td>0.002404</td>
<td>0.095760</td>
<td>0.165167</td>
<td>0.310247</td>
<td>0.481013</td>
<td>1586.53</td>
<td>22993.3</td>
<td>1.00275</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>



 ]]></description>
  <guid>https://ryonakagami.github.io/cmdstan_for_regression_monkey/posts/bayesianstatistics101/binomial_toymodel.html</guid>
  <pubDate>Fri, 01 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Bayesian methods</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/cmdstan_for_regression_monkey/posts/bayesianstatistics101/chapter_header.html</link>
  <description><![CDATA[ 




<section id="ベイズ法の考え方" class="level2">
<h2 class="anchored" data-anchor-id="ベイズ法の考え方">ベイズ法の考え方</h2>
<p>ある集団の特性がパラメーター <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> として表現されるとします．集団の一部についてデータ <img src="https://latex.codecogs.com/png.latex?y"> が観測されたとき， その <img src="https://latex.codecogs.com/png.latex?y"> からの情報はパラメーター <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> についての不確実性(uncertainty)を減らすことになります． ベイズ推測(Bayesian inference)とはこの不確実性の変化を測ることが直接的な目的となります．</p>
<p><strong> ▶&nbsp; 事前分布と事後分布</strong></p>
<p>標本空間 <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BY%7D">, パラメーター空間 <img src="https://latex.codecogs.com/png.latex?%5CTheta"> としたとき，ベイズ学習は <img src="https://latex.codecogs.com/png.latex?y,%20%5Ctheta"> に関する信念を <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BY%7D"> と <img src="https://latex.codecogs.com/png.latex?%5CTheta"> の確率分布によって表現するところから始まります．</p>
<p>まず，<img src="https://latex.codecogs.com/png.latex?%5Ctheta%5Cin%5CTheta"> について事前分布 <img src="https://latex.codecogs.com/png.latex?p(%5Ctheta)"> を設定します． <img src="https://latex.codecogs.com/png.latex?p(%5Ctheta)"> は，<img src="https://latex.codecogs.com/png.latex?%5Ctheta"> が母集団の真の特性を表すとどれだけ分析者が信じているか？を表していると解釈できます．</p>
<p>データ <img src="https://latex.codecogs.com/png.latex?y"> が観測された後，ベイズルールに従って <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> に関する信念を更新します．このとき現れるのが事後分布 <img src="https://latex.codecogs.com/png.latex?p(%5Ctheta%5Cvert%20y)"> ですが，これはデータ <img src="https://latex.codecogs.com/png.latex?y"> が観測された後に <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> が真の値であるとどれだけ信じているかを表すことに対応しています．</p>
<div class="blog-custom-border">
<p><strong>Def: 確率(probability)</strong> <br></p>
<p>ベイズ法における確率(probability) は，未知の量について人々の持つ情報や信念(belief)を表すものと解釈される．</p>
</div>
<p><br></p>
<p><strong> ▶&nbsp; ベイズルール</strong></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(%5Ctheta%5Cvert%20y)%20=%20%5Cfrac%7Bp(y%5Cvert%20%5Ctheta)p(%5Ctheta)%7D%7B%5Cint_%7B%5CTheta%7Dp(y%5Cvert%20%5Ctilde%5Ctheta)p(%5Ctilde%5Ctheta)%5C,%5Cmathrm%7Bd%7D%5Ctilde%5Ctheta%7D%0A"></p>
<p>ベイズルールが示している内容は．事後分布がどうあるべきかではなく，<strong>新たな情報を得たときに事後分布はどう変化すべきか？</strong>です．</p>


</section>

 ]]></description>
  <guid>https://ryonakagami.github.io/cmdstan_for_regression_monkey/posts/bayesianstatistics101/chapter_header.html</guid>
  <pubDate>Fri, 01 Nov 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
